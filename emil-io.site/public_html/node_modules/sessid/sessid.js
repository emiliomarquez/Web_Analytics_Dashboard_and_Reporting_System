var database = new SessionDb(); database.init();
module.exports = session;
var reqi, resi;
 
function session(socket) {
  if(socket==null || typeof(socket)=='undefined')
    console.warn("please use session.start() as middlewire in expressjs")
  else
    {
      var cookie = socket.handshake.headers.cookie;
      reqi = {headers:{cookie:cookie}};
      resi = new resip();
    }
}
function resip(){ this.send = function(data){} }
session.destroy = function () {
    return database.delete({ sessid: new cookie(reqi, resi).find('sessid') });
}
session.start = function (req, res, next) {
    reqi = req; resi = res; create(req); next();
}


session.set = function (data) {
    return database.add({ sessid: new cookie(reqi, resi).find('sessid') }, data);
}
session.unset = function (data) {
    data = JSON.parse('{"' + data + '":1}')
    return database.remove({ sessid: new cookie(reqi, resi).find('sessid') },data);
}
session.ifset = function (data) {
    datas = database.select({ sessid: new cookie(reqi, resi).find('sessid') });
    if(datas && datas != null && typeof datas[0][data] != "undefined")
        return datas[0][data];
    else return false;
}

setInterval(function () { clear(); }, 160000);
function clear() {
    var then = Date.now() - 3600000;
    var datas = database.delete({ "time": then }, "lt");
    database.init();
}

function create(req) {
    var sesid = new cookie(req, resi).find('sessid');
    if (typeof sesid == "undefined") {
        var ses = makeid(); resi.cookie('sessid', ses, { httpOnly: false });
        var data = { sessid: ses, time: Date.now() };
        database.insert(data);
    } else {
        //find in db adn update or create new
        docs = database.select({ "sessid": sesid });
        if (docs && docs != '' && docs != null) {
            database.update({ sessid: sesid }, { time: Date.now() });
        }
        else {
            var ses = makeid();
            resi.cookie('sessid', ses, { httpOnly: false });
            var data = { sessid: ses, time: Date.now() };
            database.insert(data);
        }
    }
}

cookie = function (req, res) {
    //this will show every cookie in a string
    this.show = function () {
        if (req.headers.cookie)
            return req.headers.cookie;
        else return "none";
    }
    //this function return every cookie in a array like : [ "user=someone","sid=ko123erTyu"] (ðŸ˜•google js array)
    this.get = function () {
        var val = this.show();
        return val.split('; ');
    }
    //this find the particular cookie and send its value
    this.find = function (string) {
        var val = this.get();
        val = val.find(str => { var k = str.match(string); return k; });
        if (typeof val == "undefined") { return }
        else { val = val.split('=')[1]; }
        return val;
    }
}

function makeid() {
    var length = 32;
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result + '.' + result.split('').reduce((prevHash, currVal) => (((prevHash << 6) - prevHash) + currVal.charCodeAt(0)) | 0, 0);
}







function SessionDb()
{

    this.session_file = ".temp.ses";
    this.data=[];
    this.db_ready_state = false;
    const fs = require("fs");
    // for initialize database
    this.init = function()
    {
        this.db_ready_state = true;
        if(fs.existsSync(this.session_file))
        {
            this.data = fs.readFileSync(this.session_file);
            if(this.data+"" == "" || this.data+""==null)this.data = '[]';
            this.data = JSON.parse(this.data);
        }
        else
        {
            fs.writeFileSync(this.session_file, '[]', function (err) {
                if (err) console.error(err);
                else {console.log('File is created successfully.');
                    this.data = [];
                }
            });
        }
    }
    // for find only first match
    this.find = function(operator)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(!operator.length)
            {
                var data=this.data.find((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i]) return 0;
                    } return 1;
                })
                if(typeof data =='undefined'  || data.length==0) return false;return data;
            }
            else
            {
                return this.data.find((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j]) flag=false;
                        } if(flag) return 1;
                    }
                })
            }
        }
        
    }
    // for find every match with condition (here operation is condition )
    // check condition type for more info
    this.select = function(operator,operation)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(this.data.length===0)return false;
            if(!operator.length)
            {
                var data=this.data.filter((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i] && (typeof operation =="undefined" || operation=='eq')) return 0;
                        if(item[i] > operator[i] && operation =="lteq") return 0;
                        if(item[i] < operator[i] && operation =="gteq") return 0;
                        if(item[i] >= operator[i] && operation =="lt") return 0;
                        if(item[i] <= operator[i] && operation =="gt") return 0;
                    } return 1;
                })
                if(typeof data =='undefined' || data.length==0) return false;return data;
            }
            else
            {
                var data = this.data.filter((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j] && (typeof operation =="undefined" || operation=='eq')) flag=false;
                            if(item[j] > operator[i][j] && operation=='lteq') flag=false;
                            if(item[j] < operator[i][j] && operation=='gteq') flag=false;
                            if(item[j] >= operator[i][j] && operation=='lt') flag=false;
                            if(item[j] <= operator[i][j] && operation=='gt') flag=false;
                        } if(flag) return 1;
                    }
                })
                if(typeof data =='undefined' || data.length==0) return false;return data;
            }
        }
    }
    // for insert a new value only json {} , not array [] not [{}]
    this.insert = function(data)
    {
        var len = this.data.length
        this.data[len] = data;
        var temp = JSON.stringify(this.data);
        fs.writeFileSync(this.session_file, temp ,function(err)
        {
            if(err) console.error(err);
        });
    }
    // update all value with condition
    this.update = function(operator,newvalue,operation)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(this.data.length===0)return false;
            if(!operator.length)
            {
                var flag=false;
                this.data.forEach((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i] && (typeof operation =="undefined" || operation=='eq')) return 0;
                        if(item[i] > operator[i] && operation =="lteq") return 0;
                        if(item[i] < operator[i] && operation =="gteq") return 0;
                        if(item[i] >= operator[i] && operation =="lt") return 0;
                        if(item[i] <= operator[i] && operation =="gt") return 0;
                    }
                    for(var i in newvalue){
                        item[i]=newvalue[i];
                        flag=true;
                    }
                })
                this.save(this.data);
                return flag;
            }
            else
            {
                var flags = false;
                this.data.forEach((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j] && (typeof operation =="undefined" || operation=='eq')) flag=false;
                            if(item[j] > operator[i][j] && operation=='lteq') flag=false;
                            if(item[j] < operator[i][j] && operation=='gteq') flag=false;
                            if(item[j] >= operator[i][j] && operation=='lt') flag=false;
                            if(item[j] <= operator[i][j] && operation=='gt') flag=false;
                        } 
                        if(flag)
                        {
                            for(var i in newvalue){
                                item[i]=newvalue[i];
                                flags=true;
                            }
                        }
                    }
                })
                this.save(this.data);
                return flags;
            }
        }
    }
    // for add some data in a row 
    this.add = function(operator,newvalue,operation)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(this.data.length===0)return false;
            if(!operator.length)
            {
                var flag=false;
                this.data.forEach((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i] && (typeof operation =="undefined" || operation=='eq')) return 0;
                        if(item[i] > operator[i] && operation =="lteq") return 0;
                        if(item[i] < operator[i] && operation =="gteq") return 0;
                        if(item[i] >= operator[i] && operation =="lt") return 0;
                        if(item[i] <= operator[i] && operation =="gt") return 0;
                    }
                    for(var i in newvalue){
                        item[i]=newvalue[i];
                        flag=true;
                    }
                })
                this.save(this.data);
                return flag;
            }
            else
            {
                var flags = false;
                this.data.forEach((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j] && (typeof operation =="undefined" || operation=='eq')) flag=false;
                            if(item[j] > operator[i][j] && operation=='lteq') flag=false;
                            if(item[j] < operator[i][j] && operation=='gteq') flag=false;
                            if(item[j] >= operator[i][j] && operation=='lt') flag=false;
                            if(item[j] <= operator[i][j] && operation=='gt') flag=false;
                        } 
                        if(flag)
                        {
                            for(var i in newvalue){
                                item[i]=newvalue[i];
                                flag=true;
                            }
                        }
                    }
                })
                this.save(this.data);
                return flags;
            }
        }
    }

    // for removeing a key in a row
    this.remove = function(operator,newvalue,operation)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(this.data.length===0)return false;
            if(!operator.length)
            {
                var flag=false;
                this.data.forEach((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i] && (typeof operation =="undefined" || operation=='eq')) return 0;
                        if(item[i] > operator[i] && operation =="lteq") return 0;
                        if(item[i] < operator[i] && operation =="gteq") return 0;
                        if(item[i] >= operator[i] && operation =="lt") return 0;
                        if(item[i] <= operator[i] && operation =="gt") return 0;
                    }
                    for(var i in newvalue){
                        flag=true;
                        delete item[i];
                    }          
                })
                this.save(this.data);
                return flag;
            }
            else
            {
                var flags = false;
                this.data.forEach((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j] && (typeof operation =="undefined" || operation=='eq')) flag=false;
                            if(item[j] > operator[i][j] && operation=='lteq') flag=false;
                            if(item[j] < operator[i][j] && operation=='gteq') flag=false;
                            if(item[j] >= operator[i][j] && operation=='lt') flag=false;
                            if(item[j] <= operator[i][j] && operation=='gt') flag=false;
                        } 
                        if(flag)
                        {
                            for(var i in newvalue){
                                flag=true;
                                delete item[i];
                            }
                        }
                    }
                })
                this.save(this.data);
                return flags;
            }
        }
    }
    // for delete row/rows with condition
    this.delete = function(operator,operation)
    {
        if(!this.db_ready_state){console.error("db not ready !");return 0;}
        if(typeof operator != 'object'){
            console.error("please provide a object");
            return false;
        }
        else
        {
            if(this.data.length===0)return false;
            if(!operator.length)
            {
                var flag=false;
                var data=this.data.filter((item)=>{
                    for(var i in operator){
                        if(item[i] != operator[i] && (typeof operation =="undefined" || operation=='eq')) return 0;
                        if(item[i] > operator[i] && operation =="lteq") return 0;
                        if(item[i] < operator[i] && operation =="gteq") return 0;
                        if(item[i] >= operator[i] && operation =="lt") return 0;
                        if(item[i] <= operator[i] && operation =="gt") return 0;
                    }
                    return true;
                })
                data.forEach((item)=>{
                    flags=true;
                    var index = this.data.indexOf(item);
                    this.data.splice(index, 1);
                })
                this.save(this.data);
                return flag;
            }
            else
            {
                var flags = false;
                this.data.filter((item)=>{
                    for(var i in operator)
                    {
                        var flag=true;
                        for(var j in operator[i]){
                            if(item[j] != operator[i][j] && (typeof operation =="undefined" || operation=='eq')) flag=false;
                            if(item[j] > operator[i][j] && operation=='lteq') flag=false;
                            if(item[j] < operator[i][j] && operation=='gteq') flag=false;
                            if(item[j] >= operator[i][j] && operation=='lt') flag=false;
                            if(item[j] <= operator[i][j] && operation=='gt') flag=false;
                        } 
                        if(flag) return true;
                    }
                })
                data.forEach((item)=>{
                    flags=true;
                    var index = this.data.indexOf(item);
                    this.data.splice(index, 1);
                })
                this.save(this.data);
                return flags;
            }
        }
    }
    this.save = function(data)
    {
        data = JSON.stringify(data);
        fs.writeFileSync(this.session_file, data, function (err) {
            if (err) console.error(err);
        session_sync();
         });
    }
}
function session_sync(){
  database.init();
}
